#ifndef QKNOB_H
#define QKNOB_H
#include <QPainter>
#include <math.h>
#include <QWidget>
#include <QMouseEvent>
#include <iostream>
using namespace std;

#define MIN(a, b) ((a) < (b) ? a : b)

class QKnob : public QWidget{
  Q_OBJECT
  
  QPen pen;
  float min,max,angle,value;
  int centerX,centerY,size,tickLength;
public:
  QKnob(QWidget *parent):QWidget(parent),
			 pen(QPen(Qt::black,2)),
			 min(0),max(1),value(0),
			 tickLength(10){}
  void setRange(float min,float max){this->min = min; this->max = max;}
public slots:
  void setValue(float value){
    if(this->value != value){
      this->value = value;
      //      angle = value*2*M_PI;
      update();
      emit valueChanged(value);
    }
  }
signals:
  void valueChanged(float newValue);
protected:
  void paintEvent(QPaintEvent */*event*/){
    QPainter painter(this);
    int w = rect().width();
    int h = rect().height();
    centerX = w/2;
    centerY = h/2;
    size = MIN(w,h)-4;

    painter.setPen(pen);
    painter.setBrush(Qt::white);
    painter.setRenderHint(QPainter::Antialiasing);
    painter.drawEllipse(2,2,size,size);

    painter.translate(centerX,centerY);
    painter.rotate(angle/(2*M_PI)*360+90);
    painter.drawLine(size/2-tickLength,0,size/2,0);
  }
  void mouseMoveEvent(QMouseEvent *event){
    angle = atan2(event->y()-centerY,event->x()-centerX)+3*M_PI/2;
    if(angle > 2*M_PI) angle -= 2*M_PI;
    value = angle / 2*M_PI;
    emit valueChanged(value);
    update();
  }
};

#endif
